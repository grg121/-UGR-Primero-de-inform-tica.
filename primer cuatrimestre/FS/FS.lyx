#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\headheight 3cm
\headsep 3cm
\footskip 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Fundamentos del Software.
\end_layout

\begin_layout Part*
Tema1 - Sistemas de cómputo.
 
\end_layout

\begin_layout Section*
1.1 - Componentes de un sistema de cómputo.
\end_layout

\begin_layout Subsection*
Definiciones básicas:
\end_layout

\begin_layout Description
Informática: es el conjunto de conocimientos científicos y técnicos que
 hacen posible el 
\series bold
tratamiento automático de la información
\series default
 por medio de computadoras electrónicas.
\end_layout

\begin_layout Description
Computador
\begin_inset space ~
\end_inset

(Computadora
\begin_inset space ~
\end_inset

u
\begin_inset space ~
\end_inset

ordenador): es una maquina capaz de aceptar unos datos de entrada, efectuar
 con ellos operaciones lógicas y aritméticas y proporcionar la información
 resultante a través de un medio de salida; todo ello sin la intervención
 de un operador humano y bajo el control de un programa de instrucciones
 previamente almacenado en el propio computador.
\end_layout

\begin_layout Description
Calculadora: es una máquina capáz de efectuar operaciones aritméticas bajo
 control directo del usuario.
 Una calculadora 
\series bold
programable
\series default
 es un computador.
\end_layout

\begin_layout Description
Datos: son un conjunto de símbolos utilizados para expresar o representar
 un valor numérico, un hecho, un objeto o una idea; en la forma adecuada
 para ser objeto de tratamiento.
\end_layout

\begin_layout Description
Codificación: es una transformación que representa los elementos de un conjunto
 mediante los de otro, de forma tal que a cada elemento del primer conjunto
 le corresponda un elemento distinto del segundo.
\end_layout

\begin_layout Description
Hardware: es el soporte físico de un computador; la máquina en sí: el conjunto
 de circuitos electrónicos, cables, armarios, dispositivos electromecánicos
 y otros elementos que forman el computador.
\end_layout

\begin_layout Description
Software: es el soporte lógico del ordenador; el conjunto de programas ejecutabl
es por el mismo.
\end_layout

\begin_layout Description
Firmware: bloque de instrucciones de máquina para propósitos específicos
 grabado en una memoria, normalmente de lectura/escritura que establece
 la lógica de más bajo nivel que controla los circuitos electrónicos de
 un dispositivo de cualquier tipo.
\end_layout

\begin_layout Description
Instrucción: conjunto de símbolos insertados en una secuencia estructurada
 o específica que el procesador interpreta y ejecuta.
\end_layout

\begin_layout Standard
Ejemplos de lenguaje:
\end_layout

\begin_layout Standard
Lenguaje natural: suma lo que hay en A con lo que tiene la posición 17 de
 una secuencia de valores.
\end_layout

\begin_layout Standard
Lenguaje de programación de alto nivel: A= A + M[17]
\end_layout

\begin_layout Standard
Ensamblador: ADD A, M(17)
\end_layout

\begin_layout Standard
Lenguaje máquina: 11000 001 0001 00111.
\end_layout

\begin_layout Subsection*
Elementos básicos de un computador.
\end_layout

\begin_layout Standard
Hay cuatro elementos estructurales principales:
\end_layout

\begin_layout Description
Procesador.
 Controla el funcionamiento del computador y realiza sus funciones de procesamie
nto de datos.
 Se denomina usualmente 
\series bold
unidad central de proceso 
\series default
(Central Processing Unit, 
\series bold
CPU
\series default
).
\end_layout

\begin_layout Description
Memoria
\begin_inset space ~
\end_inset

principal.
 Almacena datos y programas.
 Esta memoria es habitualmente volátil; es decir, cuando se apaga el ordenador,
 se pierde su contenido.
 En contraste, el contenido de la memoria del disco se mantiene incluso
 cuando se apaga el ordenador.
 A la memoria principal se le denomina también 
\series bold
memoria real o memoria primaria.
 
\end_layout

\begin_layout Description
Módulo
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

E/S.
 Transfieren los datos entre el computador y su entorno externo.
 El entorno externo está formado por diversos dispositivos, incluyendo dispositi
vos de memoria secundaria (por ejemplo, discos), equipos de comunicaciones
 y terminales.
\end_layout

\begin_layout Description
Bus
\begin_inset space ~
\end_inset

del
\begin_inset space ~
\end_inset

sistema.
 Proporciona comunicación entre los procesadores, la memoria principal y
 los módulos de E/S.
\end_layout

\begin_layout Description
RDIM.
 Registro de dirección de memoria; especifica la dirección de memoria de
 la siguiente lectura o escritura.
\end_layout

\begin_layout Description
RDAM.
 Registro de datos de memoria; contiene los datos que se van a escribir
 en memoria o que han sido leídos desde memoria.
\end_layout

\begin_layout Description
RDIE/S Especifica un determinado dispositivo de E/S
\end_layout

\begin_layout Description
RDAE/S.
 Permite el intercambio de datos entre el procesador y el módulo E/S.
\end_layout

\begin_layout Part*
1.2 Capa Hardware.
\end_layout

\begin_layout Section*
Registros.
\end_layout

\begin_layout Standard
El procesador contiene unos registros que son un tipo de memoria de más
 fácil acceso pero menor capacidad que la memoria principal.
 Hay dos tipos:
\end_layout

\begin_layout Subsection
Visibles
\begin_inset space ~
\end_inset

para
\begin_inset space ~
\end_inset

el
\begin_inset space ~
\end_inset

usuario
\end_layout

\begin_layout Standard
permiten disminuir el número de referencias a la memoria principal.
 Los más comunes son:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1.Registros
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

datos: se usan para realizar operaciones de carácter general.
 Los datos que se tienen en memoria principal se copian en registros para
 hacer más sencillo el uso de los distintos operadores.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2.Registros
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

dirección: contienen la dirección de determinados datos e instrucciones
 en memoria, o una parte de la misma, que sirve para obtenerla.
 Los ejemplos m'as t'ipicos son:
\end_layout

\begin_layout Itemize
el registro índice, utilizado en el direccionamiento indexado.
 Se almacena un 
\begin_inset Quotes eld
\end_inset

íncide
\begin_inset Quotes erd
\end_inset

 que es sumado a una dirección base para obtener otras direcciones.
\end_layout

\begin_layout Itemize
puntero de segmento, utilizado en direccionamiento segmentado.
 En este, la memoria se divide en segmentos y se accede a cada parte de
 la memoria indicando el la dirección base del segmento al que se quiere
 acceder y un desplazamiento dentro del mismo.
 Los punteros de segmento se encargan de almacenar la dirección base de
 determinados segmentos que son de interés.
\end_layout

\begin_layout Itemize
Puntero de pila.
 En el direccionamiento de pila hay un registro dedicado que apunta a la
 cima de la pila; esto permite hacer uso de instrucciones sin campo de dirección
 como son el push y y pop (apilar, extraer).
\end_layout

\begin_layout Standard
En algunas máquinas, las llamadas a subrutinas o a procesos implican que
 el procesador guarde toda la información contenida en los registros visibles
 para el usuario, de forma que pueda restaurarlos cuando sea necesario.
 De este modo, cada procedimiento utiliza los registros de forma independiente.
 En otros casos, es el programador el encargado de procurar que se guarde
 dicha información de los registros visibles para el usuario.
 Por ello deberá incluir en el código de sus programas ordenes específicas
 para ello.
 En conclusión, las funciones de salvar y restaurar los valores de los registros
 pueden llevarse a cabo el hardware o desde el software.
\end_layout

\begin_layout Subsection
De control y estado
\end_layout

\begin_layout Standard
Intervienen en el control del propio procesador.
 Muchos de ellos no son visibles para el usuario y se tiene que acceder
 a ellos mediante el uso de instrucciones máquina ejecutadas en modo de
 control o de sistema operativo.
 Además de los registros, ya mencionados, RDIM, RDAM, RDIE/S y EDAE/S, los
 más destacables son:
\end_layout

\begin_layout Description
Program
\begin_inset space ~
\end_inset

Counter
\begin_inset space ~
\end_inset

(PC) 
\begin_inset Quotes eld
\end_inset

Contador de programa
\begin_inset Quotes erd
\end_inset

 contiene la dirección de la próxima instrucción a leer en memoria.
\end_layout

\begin_layout Description
Intruction
\begin_inset space ~
\end_inset

Register
\begin_inset space ~
\end_inset

(IR) 
\begin_inset Quotes eld
\end_inset

Registro de instrucción
\begin_inset Quotes erd
\end_inset

 contiene la última instrucción leída.
\end_layout

\begin_layout Standard
Todos los procesadores incluyen un registro o conjunto de registros denominado
 
\begin_inset Quotes eld
\end_inset

Palabra de estado del programa
\begin_inset Quotes erd
\end_inset

 o 
\series bold
Program Status Word; 
\series default
que contiene información de estado.
 Contiene normalmente códigos de condición; como un bit para indicar si
 se está ejecutando o no en modo root, o si las interrupciones están o no
 habilitadas.
\end_layout

\begin_layout Description
Códigos
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

condición (o indicadores).
 Son bits de estado que contienen información sobre el resultado de determinadas
 operaciones.
 Normalmente son módificados por el hardware al finalizar una operación
 y sirven para controlar si esta se ha llevado a cabo de la forma esperada.
 Por lo general se pueden leer de forma implicita, pero no es posible alterarlos
 de forma explícita ya que su utilidad es la retroalimentación del resultado
 de la ejecución de una instrucción.
\end_layout

\begin_layout Part*
Ejecución de instrucciones.
\end_layout

\begin_layout Standard
Un programa que se ejecuta en el procesador consta de una serie de instrucciones
 almacenadas en memoria.
 Las instrucciones se procesan de una en una en un tiempo denominado 
\begin_inset Quotes eld
\end_inset

ciclo
\begin_inset Quotes erd
\end_inset

 que consta de dos fases: la de búsqueda, y la de ejecución.
 La ejecución del programa solo se interrumpe si hay algún tipo de error
 irrecuperable, se apaga la máquina, o una instrucción ordena que el procesador
 se detenga.
\end_layout

\begin_layout Standard
Al principio del programa, el procesador leera una instrucción de memoria.
 La dirección de dicha instrucción, por lo general, es leída del cotador
 de programa, por lo que es necesario incrementar el valor de dicho contador
 al finalizar cada instrucción.
 Salvo que se especifique lo contrario, el procesador aumentará siempre
 el contador de forma que las instrucciones se ejecuten de forma secuencial.
\end_layout

\begin_layout Standard
Las instrucciones se almacenan en el RI (registro de instrucción); contienen
 bits que especifican la acción que debe llevar a cabo el procesador.
 Por lo general estas acciones se pueden clasificar en:
\end_layout

\begin_layout Itemize
procesador-memoria: transfieren información entre el procesador y la memoria
 principal.
\end_layout

\begin_layout Itemize
Procesador-E/S: tranfieren datos entre el procesador y un periférico.
\end_layout

\begin_layout Itemize
Procesamiento de datos: realizan opraciones aritmético-lógicas con los datos
 que maneja el procesador en sus registros.
\end_layout

\begin_layout Itemize
Control: realizan cambios en la secuencia de ejecución de instrucciones.
\end_layout

\begin_layout Section*
Comunicación con E/S
\end_layout

\begin_layout Standard
El procesador tiene tres formas de comunidarse con un dispositivo de E/S:
\end_layout

\begin_layout Enumerate
E/S programada: en este caso, el módulo de E/S realiza la acción requerida
 por el procesador en la ejecución de una orden que involucre E/S, pero
 no realiza ningún tipo de interrupción; esto es, no avisa al procesador
 cuando la acción ha sido completada.
 Esto provoca que el procesador tenga que adoptar un papel activo, encargandose
 de comprobar periódicamente si el módulo de E/S ha completado su tarea.
 Esto le obliga a ejecutar ordenes de control sobre el dispositivo, instruccione
s para comprobar el estado del mismo y de transferencia para leer y/o escribir
 los registros del procesador o del dispositivo externo.
 Esto provoca que el procesador este mal ocupado durante la ejecución del
 programa y se desperdicien tiempo y recursos.
 Como alternativa aparece la E/S con interrupciones.
\end_layout

\begin_layout Enumerate
E/S con interrupciones: en este caso, el procesador envía instrucciones
 al módulo de E/S y acto seguido, salva el contexto de ejecución del programa
 actual y pasa a ejecutar otro programa (o llevar a cabo otra función).
 Por su parte, el módulo E/S lleva a cabo la orden que se le ha asignado
 y envía una interrupción al procesador cuando ha completado su tarea.
 De este modo, el procesador no debe estar pendiente en todo momento de
 comprobar si se ha completado la instrucción de E/S y puede aprovechar
 el tiempo en otra cosa.
 Sin embargo, esto sigue siendo poco efectivo porque cada lectura y escritura
 de datos con un periférico requiere que los datos pasen a través del procesador.
 Además, si hay distintos dispositivos de E/S, el procesador requiere de
 algún método que permita reconocer cual de ellos ha generado cada interrupción
 (en algunos computadores cada dispositivo de E/S tiene su propia linea
 de interrupciones, pero en otras solo existe una que es compartida por
 todos).
\end_layout

\begin_layout Enumerate
Acceso directo a memoria: conocida como DMA (direct memory acces), se utiliza
 cuando es necesario transmitir grandes cantidades de datos.
 El procesador cuenta con la ayuda de un módulo de acceso directo a memoria,
 (DMA), al que envía información sobre lo que se quiere realizar en esta:
 dispositivo de E/S involucrado, acción (lectura o escritura) a realizar,
 posición inicial de memoria donde empezar a leer o escribir datos y el
 número de palabras que se quiere leer o escribir.
 De este modo, el procesador solo está involucrado con la transferencia
 al inicio y al final de la transferencia de datos.
 Así el procesador puede realizar otras acciones al mismo tiempo que se
 realiza la transferencia de datos con un periférico.
 Hay que tener en cuenta que el módulo DMA hará uso del bus de datos, que
 en ocasiones será requerido por el procesador, que deberá esperar a que
 se complete el ciclo del bus.
 Esto no es una interrupción; el procesador no sigue haciendo algo mientras
 se completa el ciclo sino que, literalmente, espera a que este se complete
 y entonces hace uso del bus.
 Esto explica por qué un computador trabaja más despacio mientras transfiere
 datos a un dispositivo de E/S.
\end_layout

\begin_layout Standard
Cuando un programa intenta acceder a los vectores que gestionan las interrupcion
es, el sistema operativo bloquea cualquier posible cambio que este pretenda
 realizar.
 Esto es posible gracias a que el procesador dispone de distintos modos
 de ejecución ; de esta forma encontramos instrucciones privilegiadas (modo
 supervisor/kernel) e instrucciones no privilegiadas (modo usuario).
 Las primeras son las que pueden interferir en la ejecución de otros programas
 y las segundas, las que no tienen peligro de inteferir en los demás programas.
\end_layout

\begin_layout Standard
Esto es lo que se conoce como niveles de ejecución.
 
\end_layout

\begin_layout Section*
PROTECCIÓN:
\end_layout

\begin_layout Standard
Una de las funciones del SO es la protección de unos usuarios frente a otros.
 Ni por malicia ni por descuido deberá poder un usuario acceder a la información
 de otro.
\end_layout

\begin_layout Standard
Dado que la protección tiene que conseguirse en tiempo de ejecución, será
 necesario que esta debe basarse en mecanismo de Hardware e instrucciones
 máquina.
\end_layout

\begin_layout Subsection*
Protección del procesador.
\end_layout

\begin_layout Standard
Los mecanismos de protección del procesador se basan en los niveles de ejecución
 del mismo.
 La mayoría de computadores presentan dos o más niveles de ejecución; el
 menor permisivo de estos niveles es el nivel de usuario, que no puede realizar
 más que un subconjunto de todas las instrucciones máquina del computador,
 y que además no puede acceder a algunos registros, ni a determinadas zonas
 de la memoria.
 En contraposición, el nivel de ejecución más permisivo es el nivel del
 nucleo, que puede ejecutar todas las instrucciones máquina y acceder a
 cualquier registro y cualquier zona de la memoria.
 El nivel de nucleo está reservado para el SO.
 Uno de los objetivos principales del uso de niveles de ejecución es proteger
 los periféricos (y datos que estos puedan contener) de modo que ningún
 usuario pueda modificar los datos de otro.
\end_layout

\begin_layout Standard
Tan solo hay un tipo de instrucción capáz de cambiar del nivel usuario al
 nivel nucleo.
 Estas son las 
\begin_inset Quotes eld
\end_inset

trampas
\begin_inset Quotes erd
\end_inset

, funcionan generando interrupciones.
 El resultado de cualquier interrupción es poner el procesador en nivel
 de nucleo.
 Sin embargo, por lo general, cuando esto ocurre, el SO, que es el encargado
 de gestionar las interrupciones, detiene la ejecución del proceso que ha
 procovado la interrupción, realiza las operaciones que sean necesarias
 y se asegura de devolver el procesador a modo usuario antes de continuar
 con la ejecución del programa.
\end_layout

\begin_layout Standard
Dado que los dispositivos de E/S son recursos que deben estar protegidos,
 las instrucciones máquina que acceden a los mismos están limitadas al nivel
 del núcleo.
 Un programa oslo podrá acceder a estos dispositivos mediante peticiones
 al SO.
\end_layout

\begin_layout Subsection*
Protección de memoria.
 
\end_layout

\begin_layout Standard
Los mecanismos de protección de memoria deben procurar que ningún programa
 sea capaz de acceder a regiones de memoria que estén fuera de los espacios
 que el SO le ha asignado.
 Uno de los mecanismos más típicos es asignarle a cada programa una pereja
 de registros 
\begin_inset Quotes eld
\end_inset

valla
\begin_inset Quotes erd
\end_inset

.
 La idea es agrupar toda la información del programa de forma consecutiva
 y almacenar en esta pareja de registros las direcciones de la primera y
 última dirección de memoria asignada al programa.
 Así, además de poder acceder a cada elemento con un direccionamiento indexado
 que utiliza la primera dirección como dirección base, también se puede
 activar un mecanismo que comprueba que no se ha superado la dirección límite
 y que interrumpa el programa en caso de que esto ocurra.
\end_layout

\begin_layout Part*
1.3 El sistema operativo.
\end_layout

\begin_layout Standard
Un sistema operativo es un programa que controla la ejecución de aplicaciones
 y programas y que actúa como interfaz entre las aplicaciones y el hardware
 del computador.
 Se puede considerar que un SO tiene los siguientes objetivos:
\end_layout

\begin_layout Itemize
Facilitar el uso del computador.
\end_layout

\begin_layout Itemize
Permitir que los recursos del computador se utilicen de forma eficiente
\end_layout

\begin_layout Itemize
Capacidad para evolucionar (actualizarse) sin dejar de llevar a cabo sus
 prestaciones.
\end_layout

\begin_layout Standard
Software y Hadrware son utilizados para proporcionar aplicaciones a los
 usuarios que, en realidad, no se preocupan por los detalles del hardware,
 sino que ven el computador como un conjunto de aplicaciones.
 Por lo general, las aplicaciones se desarrollan en distintos lenguajes
 de programación para evitar tener que controlar el hardware directamente,
 lo cual sería una labor muy compleja para los programadores.
 Para facilitar la tarea de programación se proporcionan unos 
\series bold
programas de sistema
\series default
, que se encargan de facilitar el control del hardware a los programadores.
 Algunos de estos programas se conocen como utilidades y se usan para asistir
 al programador en las fases de desarrollo de programas, gestión de ficheros
 y control de dispositivos de E/S.
\end_layout

\begin_layout Standard
El sistema Operativo es el programa de sistema más importante ya que oculta
 los detalles del hardware al programador y le proporciona una interfaz
 apropiada para utilizar el sistma.
 Además actùa como mediador, haciendo más facil al programador y a las aplicacio
nes el acceso y uso de utilidades y servicios.
\end_layout

\begin_layout Standard
El sistema Operativo proporciona servicios en las siguientes áreas:
\end_layout

\begin_layout Description
Desarrollo
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

programas Editores y depuradores para asistir al programador en la creación
 de programas.
 (Utilidades conocidas como herramientas de desarrollo de programas de aplicació
n).
\end_layout

\begin_layout Description
Ejecución
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

programas El SO se encarga de cargas instrucciones y datos en memoria principal,
 inicializar los dispositivos de E/S y los ficheros, así como la preparación
 de otros recursos necesarios para la ejecución de un programa.
\end_layout

\begin_layout Description
Acceso
\begin_inset space ~
\end_inset

a
\begin_inset space ~
\end_inset

dispositivos
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

E/S El So proporciona una interfaz uniforme a todos los dispotivos de E/S
 que esconde al programador los detalles de las instrucciones y señales
 de control propias de cada dispositivo y les permite acceder a ellos utilizando
 lecturas y escrituras sencillas.
\end_layout

\begin_layout Description
Acceso
\begin_inset space ~
\end_inset

controlado
\begin_inset space ~
\end_inset

a
\begin_inset space ~
\end_inset

los
\begin_inset space ~
\end_inset

ficheros para acceder a ellos el SO se encarga de comprobar la naturaleza
 del dispotivo de E/S al que accede y la estructura de los datos contenidos
 en dicho fichero.
 Además, si se trata de sistemas con múltiples usuarios, el SO puede proporciona
r mecanismos de protección para controlar el acceso a los ficheros.
\end_layout

\begin_layout Description
Acceso
\begin_inset space ~
\end_inset

al
\begin_inset space ~
\end_inset

sistema Para sistemas compartidos o públicos, el SO controla el acceso al
 sistema completo y a determinados recursos del mismo.
 Evitando el uso no autorizado del sistema y resolviendo conflictos de recursos.
\end_layout

\begin_layout Description
Detección
\begin_inset space ~
\end_inset

y
\begin_inset space ~
\end_inset

respuesta
\begin_inset space ~
\end_inset

a
\begin_inset space ~
\end_inset

errores desde errores de hardware internos y externos (memoria, fallos de
 dispotivo) a los diferentes errores software (dividir por cero, acceder
 a posiciones de memoria prohibidas, etc..)
\end_layout

\begin_layout Description
Contabilidad Un buen SO recoge estadísticas del uso de los diferentes recursos
 y monotoriza parámetros de rendimiento como el tiempo de respuesta.
\end_layout

\begin_layout Section*
Capacidad para evolucionar (SO).
\end_layout

\begin_layout Standard
Una de las razones por las que tiene que evolucionar un SO es el avance
 de la tecnología en hardware.
 Cuando se consigue implementar algún avance en este ámbito, el sistema
 operativo debe ser capáz de adaptarse al cambio y ofrecer nuevas prestaciones
 acordes a lo conseguido por medio del hardware.
\end_layout

\begin_layout Standard
Además, el SO tiene que ofrecer nuevos servicios a menudo, para conseguir
 suplir cada vez más necesidades del usuario o mejorar la forma en que lo
 hace.
\end_layout

\begin_layout Standard
Por último, es necesario que un sistema operativo se actualice frecuentemente
 para corregir todos los fallos que se puedan ir encontrando cuando se hace
 uso del mismo.
\end_layout

\begin_layout Section*
La evolución de los sistemas operativos:
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
